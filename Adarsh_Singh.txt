Name-Adarsh Singh.
 Binary Search is used to partition the smaller array,
 adjusting the partition until the conditions for a valid median are met.

Median Calculation: If the combined size of both arrays is odd, the median is the middle element. 
If the combined size is even, the median is the average of the two middle elements.

#include <iostream>
#include <vector>
#include <climits>
using namespace std;

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size(), n2 = nums2.size();
        if (n1 > n2) return findMedianSortedArrays(nums2, nums1); // Ensure nums1 is smaller
        int n = n1 + n2;
        int left = (n1 + n2 + 1) / 2;

        int low = 0, high = n1;
        while (low <= high) {
            int mid1 = (low + high) >> 1;
            int mid2 = left - mid1;

            int l1 = INT_MIN, l2 = INT_MIN;
            int r1 = INT_MAX, r2 = INT_MAX;

            if (mid1 < n1) r1 = nums1[mid1];
            if (mid2 < n2) r2 = nums2[mid2];
            if (mid1 - 1 >= 0) l1 = nums1[mid1 - 1];
            if (mid2 - 1 >= 0) l2 = nums2[mid2 - 1];

            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 1) return max(l1, l2); // Odd case
                else return (max(l1, l2) + min(r1, r2)) / 2.0; // Even case
            } else if (l1 > r2) {
                high = mid1 - 1;
            } else {
                low = mid1 + 1;
            }
        }
        return 0.0; // In case no valid median is found
    }
};

int main() {
    // Test case
    Solution solution;
    vector<int> nums1 = {1, 3};
    vector<int> nums2 = {2};

    double result = solution.findMedianSortedArrays(nums1, nums2);
    cout << "The median of the two sorted arrays is: " << result << endl;

    return 0;
}
